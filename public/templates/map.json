{
  "exportButton": true,
  "data": "[dataDefinition]",
  "networks": "[networksDefinition]",
  "zoom": true,
  "pan": true,
  "maps": [
    {
      "name": "my_map",
      "tiles": "Stadia.AlidadeSmooth",
      "zoomLevel": 4,
      "center": [
        51.5062,
        -30
      ]
    }
  ],
  "layouts": [
    {
      "name": "mapLayout",
      "network": "aggregatedNet",
      "map": "my_map",
      "lat": {
        "expression": "datum.key['data.lat']"
      },
      "lng": {
        "expression": "datum.key['data.lon']"
      },
      "transform": [
        {
          "type": "set",
          "field": "width",
          "value": 100
        },
        {
          "type": "set",
          "field": "height",
          "value": 100
        }
      ]
    }
  ],
  "parameters": [
    {
      "name": "hoveredNode",
      "network": "network",
      "type": "selection",
      "clearOnBackgroundClick": true
    },
    {
      "name": "selectedNodes",
      "network": "network",
      "type": "selection",
      "clearOnBackgroundClick": false
    },
    {
      "name": "neighbours",
      "source": "hoveredNode",
      "transform": [
        {
          "type": "neighbours",
          "direction": "both"
        }
      ]
    },
    {
      "name": "selectedNeighbours",
      "source": "selectedNodes",
      "transform": [
        {
          "type": "neighbours",
          "direction": "both"
        }
      ]
    },
    {
      "name": "selectedCommonNeighbours",
      "source": "selectedNodes",
      "transform": [
        {
          "type": "commonNeighbours",
          "direction": "both"
        }
      ]
    },
    {
      "name": "nodeTypeInShape",
      "value": "[nodeTypeInShape]"
    },
    {
      "name": "nodeSizeParam",
      "bind": {
        "input": "range",
        "event": "onChange",
        "label": "Node Size",
        "min": "0",
        "max": "100",
        "step": ".1"
      },
      "value": 2
    },
    {
      "name": "nodeOpacityParam",
      "bind": {
        "input": "range",
        "label": "Node Opacity",
        "min": "0.0",
        "max": "1",
        "step": "0.05"
      },
      "value": 1
    },
    {
      "name": "unselectedOpacity",
      "bind": {
        "input": "range",
        "label": "Opacity Unselected Nodes & Links",
        "min": "0.0",
        "max": "1",
        "step": "0.05"
      },
      "value": 1
    },
    {
      "name": "linkWidthParam",
      "bind": {
        "input": "range",
        "label": "Link Width",
        "min": "0",
        "max": "5",
        "step": ".5"
      },
      "value": 1
    },
    {
      "name": "linkOpacityParam",
      "bind": {
        "input": "range",
        "label": "Link Opacity",
        "min": "0",
        "max": "1",
        "step": "0.05"
      },
      "value": 0.6
    },
    {
      "name": "linkGapParam",
      "bind": {
        "input": "range",
        "event": "onChange",
        "label": "Link Gap",
        "min": "0",
        "max": "5",
        "step": ".5"
      },
      "value": 3
    },
    {
      "name": "time",
      "bind": {
        "input": "brush",
        "axisType": "time",
        "network": "network",
        "for": "links",
        "field": "data._time"
      }
    }
  ],
  "groupings": [
    {
      "name": "positions",
      "common": [
        "data.lat",
        "data.lon"
      ],
      "network": "network"
    }
  ],
  "scales": [
    {
      "name": "radius",
      "type": "linear",
      "range": [
        2,
        150
      ],
      "rangeMapFunction": "datum * params.nodeSizeParam",
      "domain": {
        "data": "network.nodes",
        "field": "degree"
      }
    },
    {
      "name": "nodeShape",
      "type": "ordinal",
      "range": "[nodeTypeShapeScheme]",
      "domain": {
        "data": "network.nodes",
        "field": "data.type0"
      }
    },
    {
      "name": "nodeColor",
      "type": "ordinal",
      "range": "[colorScheme]",
      "domain": {
        "data": "network.nodes",
        "field": "data.type0"
      }
    },
    {
      "name": "edgeColor",
      "type": "ordinal",
      "range": "[colorScheme]",
      "domain": {
        "data": "network.links",
        "field": "linkType"
      }
    },
    {
      "name": "edgeWidth",
      "type": "linear",
      "range": [
        1,
        10
      ],
      "rangeMapFunction": "datum * params.linkWidthParam",
      "domain": {
        "data": "network.links",
        "field": "linkWeight"
      }
    },
    {
      "name": "edgeOpacity",
      "type": "linear",
      "range": [
        0,
        0.8
      ],
      "rangeMapFunction": "datum * params.linkOpacityParam",
      "domain": {
        "data": "network.links",
        "field": "linkWeight"
      }
    }
  ],
  "vis": [
    {
      "mark": {
        "type": "map",
        "map": "my_map"
      }
    },
    {
      "entries": "positions",
      "layout": "mapLayout",
      "layouts": [
        {
          "name": "inner",
          "network": "entry",
          "type": "cytoscape",
          "algorithm": "circle"
        }
      ],
      "vis": [
        {
          "entries": "entry.links",
          "layout": "inner",
          "mark": {
            "type": "linkpath",
            "start": "source",
            "end": "target",
            "stroke": {
              "conditions": [
                {
                  "test": "!params.nodeTypeInShape",
                  "value": "grey"
                }
              ],
              "field": "linkType",
              "scale": "edgeColor"
            },
            "strokeWidth": {
              "expression": "datum.linkWeight == null ? params.linkWidthParam : 0.1 * datum.linkWeight * params.linkWidthParam"
            },
            "opacity": {
              "conditions": [
                {
                  "//": "not in time",
                  "test": "datum.data._time != null && datum.data._time < params.time[0] || datum.data._time > params.time[1]",
                  "value": 0
                },    
                {
                  "//": "default",
                  "test": "params.selectedNodes.nodes.length == 0 && params.hoveredNode.nodes.length == 0",
                  "expression": "params.linkOpacityParam"
                },
                {
                  "//": "node hovered",
                  "test": "params.hoveredNode.nodes.length > 0 && params.hoveredNode.nodes[0] == datum",
                  "expression": "params.linkOpacityParam * 2"
                },
                {
                  "//": "neihgbor hovered",
                  "test": "params.neighbours.nodes.length > 0 && indexof(params.neighbours.links, datum) > -1",
                  "expression": "params.linkOpacityParam * 2"
                },
                {
                  "//": "node selected",
                  "test": "params.selectedNodes.nodes.length > 0 && indexof(params.selectedNodes.links, datum) > -1",
                  "expression": "params.linkOpacityParam"
                },
                {
                  "//": "selected common neighor",
                  "test": "params.selectedCommonNeighbours.nodes.length > 0 && indexof(params.selectedCommonNeighbours.links, datum) > -1",
                  "expression": "params.linkOpacityParam"
                },
                {
                  "//": "selected neighbour",
                  "test": "params.selectedNeighbours.nodes.length > 0 && indexof(params.selectedNeighbours.links, datum) > -1",
                  "expression": ".5 + params.unselectedOpacity"
                },
                {
                  "//": "selected neighbour",
                  "test": "params.hoveredNode.nodes.length > 0",
                  "value": 0.1
                },
                {
                  "//": "selected neighbour",
                  "test": "params.selectedNeighbours.nodes.length > 0",
                  "expression": "params.unselectedOpacity"
                }
              ],
              "expression": ".1"
            },
            "shape": "line"
          }
        },
        {
          "entries": "entry.nodes",
          "layout": "inner",
          "actions": [
            {
              "interaction": "select",
              "using": "cursor",
              "event": "mouseover",
              "action": "replace",
              "selection": "hoveredNode"
            },
            {
              "interaction": "select",
              "using": "cursor",
              "event": "mouseout",
              "action": "remove",
              "selection": "hoveredNode"
            },
            {
              "interaction": "select",
              "using": "cursor",
              "event": "click",
              "action": "toggle",
              "selection": "selectedNodes"
            }
          ],
          "mark": {
            "type": "symbol",
            "shape": {
              "conditions": [
                {
                  "test": "!params.nodeTypeInShape",
                  "value": "circle"
                }
              ],
              "field": "data.type0",
              "scale": "nodeShape"
            },
            "area": {
              "expression": "10 + datum.degree * params.nodeSizeParam"
            },
            "opacity": {
              "conditions": [
                {
                  "//": "default",
                  "test": "params.selectedNodes.nodes.length == 0 && params.hoveredNode.nodes.length == 0",
                  "expression": "params.nodeOpacityParam"
                },
                {
                  "//": "hovered",
                  "test": "params.hoveredNode.nodes.length > 0 && params.hoveredNode.nodes[0] == datum",
                  "expression": "params.nodeOpacityParam * 2"
                },
                {
                  "//": "hovered neighbour",
                  "test": "params.neighbours.nodes.length > 0 && indexof(params.neighbours.nodes, datum) > -1",
                  "expression": "params.nodeOpacityParam * 2"
                },
                {
                  "//": "selected node",
                  "test": "params.selectedNodes.nodes.length > 0 && indexof(params.selectedNodes.nodes, datum) > -1",
                  "expression": "params.nodeOpacityParam"
                },
                {
                  "//": "selected common neighor",
                  "test": "params.selectedCommonNeighbours.nodes.length > 0 && indexof(params.selectedCommonNeighbours.nodes, datum) > -1",
                  "expression": "params.nodeOpacityParam"
                },
                {
                  "//": "selected neighbour",
                  "test": "params.selectedNeighbours.nodes.length > 0 && indexof(params.selectedNeighbours.nodes, datum) > -1",
                  "expression": ".5 + params.unselectedOpacity"
                }
              ],
              "expression": "params.unselectedOpacity"
            },
            "fill": {
              "conditions": [
                {
                  "test": "params.nodeTypeInShape",
                  "value": "black"
                }
              ],
              "field": "data.type0",
              "scale": "nodeColor"
            },
            "stroke": "white",
            "strokeWidth": 0.5,
            "tooltip": {
              "expression": "[nodeLabel] + ' (' + datum.degree + (datum.degree == 1 ? ' link)' : ' links)') "
            }
          },
          "inducedLayout": {
            "name": "nodeLayout"
          }
        }
      ]
    },
    {
      "entries": "positions_INTER_GROUP_LINKS",
      "layout": "nodeLayout",
      "mark": {
        "type": "linkpath",
        "start": "source",
        "end": "target",
        "stroke": {
          "conditions": [
            {
              "test": "!params.nodeTypeInShape",
              "value": "grey"
            }
          ],
          "field": "linkType",
          "scale": "edgeColor"
        },
        "strokeWidth": {
          "expression": "datum.linkWeight == null ? params.linkWidthParam : 0.1 * datum.linkWeight * params.linkWidthParam"
        },
        "opacity": {
          "conditions": [
            {
              "selectionIsEmpty": "hoveredNode.nodes",
              "expression": "((datum.data._time != null && datum.data._time >= params.time[0] && datum.data._time <= params.time[1]) || (datum.data._time == null)) ? params.linkOpacityParam : '0' "
            },
            {
              "inSelection": "neighbours.links",
              "expression": "((datum.data._time != null && datum.data._time >= params.time[0] && datum.data._time <= params.time[1]) || (datum.data._time == null)) ? params.linkOpacityParam : '0' "
            }
          ],
          "expression": " (datum.data._time >= params.time[0] && datum.data._time <= params.time[1]) ? 0.1 : 0 "
        },
        "shape": "line"
      }
    }
  ]
}